{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red204\green0\blue78;\red255\green255\blue255;\red44\green55\blue61;
\red39\green78\blue204;\red42\green55\blue62;\red21\green129\blue62;\red0\green0\blue0;\red238\green57\blue24;
}
{\*\expandedcolortbl;;\cssrgb\c84706\c10588\c37647;\cssrgb\c100000\c100000\c100000;\cssrgb\c22745\c27843\c30588;
\cssrgb\c20000\c40392\c83922;\cssrgb\c21569\c27843\c30980;\cssrgb\c5098\c56471\c30980;\cssrgb\c0\c0\c0;\cssrgb\c95686\c31765\c11765;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 -- Write SQL queries to perform the following tasks using the Sakila database:\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 -- Determine the number of copies of the film "Hunchback Impossible" that exist in the inventory system.\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf4 \strokec4  \cb1 \
\cb3     \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf4 \strokec4  \cf5 \strokec5 COUNT\cf6 \strokec6 (*)\cf4 \strokec4  \cb1 \
\cb3      \cf5 \strokec5 FROM\cf4 \strokec4  \cf7 \strokec7 `sakila.inventory`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 i\strokec4  \cb1 \
\cb3      \cf5 \strokec5 INNER\cf4 \strokec4  \cf5 \strokec5 JOIN\cf4 \strokec4  \cf7 \strokec7 `sakila.film`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 f\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 i.film_id\strokec4  = \strokec8 f.film_id\strokec4  \cb1 \
\cb3      \cf5 \strokec5 WHERE\cf4 \strokec4  \strokec8 f.title\strokec4  = \cf7 \strokec7 'Hunchback Impossible'\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 num_copies\strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 -- List all films whose length is longer than the average length of all the films in the Sakila database.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 SELECT\cf4 \strokec4  \cb1 \
\cb3     \strokec8 title\strokec4 , \cb1 \
\cb3     \cf5 \strokec5 length\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.film`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf4 \strokec4  \cb1 \
\cb3     \cf5 \strokec5 length\cf4 \strokec4  \cf6 \strokec6 >\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf4 \strokec4  \cf5 \strokec5 AVG\cf6 \strokec6 (\cf5 \strokec5 length\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 FROM\cf4 \strokec4  \cf7 \strokec7 `sakila.film`\cf6 \strokec6 )\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 -- Use a subquery to display all actors who appear in the film "Alone Trip".\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 SELECT\cf4 \strokec4  \cb1 \
\cb3     \strokec8 actor.first_name\strokec4 ,\cb1 \
\cb3     \strokec8 actor.last_name\cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.actor`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 actor\cb1 \strokec4 \
\cf5 \cb3 \strokec5 INNER\cf4 \strokec4  \cf5 \strokec5 JOIN\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.film_actor`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 film_actor\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 actor.actor_id\strokec4  = \strokec8 film_actor.actor_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 INNER\cf4 \strokec4  \cf5 \strokec5 JOIN\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.film`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 film\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 film_actor.film_id\strokec4  = \strokec8 film.film_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf4 \strokec4  \cb1 \
\cb3     \strokec8 film.title\strokec4  = \cf7 \strokec7 'Alone Trip'\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 -- Bonus:\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 -- Sales have been lagging among young families, and you want to target family movies for a promotion. Identify all movies categorized as family films.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 SELECT\cf4 \strokec4  \cb1 \
\cb3     \strokec8 f.title\strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 film_title\strokec4 ,\cb1 \
\cb3     \strokec8 c.name\strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 category\cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.film`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 f\cb1 \strokec4 \
\cf5 \cb3 \strokec5 JOIN\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.film_category`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 fc\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 f.film_id\strokec4  = \strokec8 fc.film_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 JOIN\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.category`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 c\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 fc.category_id\strokec4  = \strokec8 c.category_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf4 \strokec4  \cb1 \
\cb3     \strokec8 c.name\strokec4  = \cf7 \strokec7 'Family'\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 -- Retrieve the name and email of customers from Canada using both subqueries and joins. To use joins, you will need to identify the relevant tables and their primary and foreign keys.\cf4 \cb1 \strokec4 \
\cb3  \cf5 \strokec5 SELECT\cf4 \strokec4  \cb1 \
\cb3     \strokec8 first_name\strokec4 ,\cb1 \
\cb3     \strokec8 last_name\strokec4 ,\cb1 \
\cb3     \strokec8 email\cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.customer`\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf4 \strokec4  \cb1 \
\cb3     \strokec8 customer_id\strokec4  \cf5 \strokec5 IN\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 SELECT\cf4 \strokec4  \cb1 \
\cb3             \strokec8 customer_id\cb1 \strokec4 \
\cb3         \cf5 \strokec5 FROM\cf4 \strokec4  \cb1 \
\cb3             \cf7 \strokec7 `sakila.address`\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 WHERE\cf4 \strokec4  \cb1 \
\cb3             \strokec8 city_id\strokec4  \cf5 \strokec5 IN\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 SELECT\cf4 \strokec4  \cb1 \
\cb3                     \strokec8 city_id\cb1 \strokec4 \
\cb3                 \cf5 \strokec5 FROM\cf4 \strokec4  \cb1 \
\cb3                     \cf7 \strokec7 `sakila.city`\cf4 \cb1 \strokec4 \
\cb3                 \cf5 \strokec5 WHERE\cf4 \strokec4  \cb1 \
\cb3                     \strokec8 country_id\strokec4  = \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3                         \cf5 \strokec5 SELECT\cf4 \strokec4  \cb1 \
\cb3                             \strokec8 country_id\cb1 \strokec4 \
\cb3                         \cf5 \strokec5 FROM\cf4 \strokec4  \cb1 \
\cb3                             \cf7 \strokec7 `sakila.country`\cf4 \cb1 \strokec4 \
\cb3                         \cf5 \strokec5 WHERE\cf4 \strokec4  \cb1 \
\cb3                             \strokec8 country\strokec4  = \cf7 \strokec7 'Canada'\cf4 \cb1 \strokec4 \
\cb3                     \cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3             \cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 )\cf4 \strokec4 ;\cb1 \
\
\cf5 \cb3 \strokec5 SELECT\cf4 \strokec4  \cb1 \
\cb3     \strokec8 c.first_name\strokec4 ,\cb1 \
\cb3     \strokec8 c.last_name\strokec4 ,\cb1 \
\cb3     \strokec8 c.email\cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.customer`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 c\cb1 \strokec4 \
\cf5 \cb3 \strokec5 INNER\cf4 \strokec4  \cf5 \strokec5 JOIN\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.address`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 a\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 c.address_id\strokec4  = \strokec8 a.address_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 INNER\cf4 \strokec4  \cf5 \strokec5 JOIN\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.city`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 ct\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 a.city_id\strokec4  = \strokec8 ct.city_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 INNER\cf4 \strokec4  \cf5 \strokec5 JOIN\cf4 \strokec4  \cb1 \
\cb3     \cf7 \strokec7 `sakila.country`\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 cn\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 ct.country_id\strokec4  = \strokec8 cn.country_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf4 \strokec4  \cb1 \
\cb3     \strokec8 cn.country\strokec4  = \cf7 \strokec7 'Canada'\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 --- 6 Determine which films were starred by the most prolific actor in the Sakila database. A prolific actor is defined as the actor who has acted in the most number of films. First, you will need to find the most prolific actor and then use that actor_id to find the different films that he or she starred in.\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 -- First we find the id of the most prolific actor\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 SELECT\cf4 \strokec4  \strokec8 actor_id\strokec4  \cb1 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 SELECT\cf4 \strokec4  \strokec8 actor_id\strokec4 , \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec8 film_id\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 films\strokec4  \cb1 \
\cb3   \cf5 \strokec5 FROM\cf4 \strokec4  \strokec8 film_actor\cb1 \strokec4 \
\cb3   \cf5 \strokec5 GROUP\cf4 \strokec4  \cf5 \strokec5 BY\cf4 \strokec4  \strokec8 actor_id\cb1 \strokec4 \
\cb3   \cf5 \strokec5 ORDER\cf4 \strokec4  \cf5 \strokec5 BY\cf4 \strokec4  \strokec8 films\strokec4  \cf5 \strokec5 DESC\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 LIMIT\cf4 \strokec4  \cf9 \cb3 \strokec9 1\cf6 \cb3 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 s\strokec4 ;\cb1 \
\
\
\cf2 \cb3 \strokec2 -- Then get the films starred by the most prolific actor\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 SELECT\cf4 \strokec4  \strokec8 fi.title\strokec4  \cb1 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \strokec8 film_actor\strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 fa\strokec4  \cb1 \
\cf5 \cb3 \strokec5 JOIN\cf4 \strokec4  \strokec8 film\strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 fi\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 fa.film_id\strokec4  = \strokec8 fi.film_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf4 \strokec4  \strokec8 actor_id\strokec4  = \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 SELECT\cf4 \strokec4  \strokec8 actor_id\strokec4  \cb1 \
\cb3     \cf5 \strokec5 FROM\cf4 \strokec4  \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 SELECT\cf4 \strokec4  \strokec8 actor_id\strokec4 , \cf5 \strokec5 count\cf6 \strokec6 (\cf4 \strokec8 film_id\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 films\strokec4  \cb1 \
\cb3       \cf5 \strokec5 FROM\cf4 \strokec4  \strokec8 film_actor\cb1 \strokec4 \
\cb3       \cf5 \strokec5 GROUP\cf4 \strokec4  \cf5 \strokec5 BY\cf4 \strokec4  \strokec8 actor_id\cb1 \strokec4 \
\cb3       \cf5 \strokec5 ORDER\cf4 \strokec4  \cf5 \strokec5 BY\cf4 \strokec4  \strokec8 films\strokec4  \cf5 \strokec5 DESC\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 LIMIT\cf4 \strokec4  \cf9 \cb3 \strokec9 1\cf6 \cb3 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 AS\cf4 \strokec4  \strokec8 s1\cf6 \strokec6 )\cf4 \strokec4 ;\cb1 \
\
\cf2 \cb3 \strokec2 -- 7 Find the films rented by the most profitable customer in the Sakila database. You can use the customer and payment tables to find the most profitable customer, i.e., the customer who has made the largest sum of payments.\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 -- The subquery in the WHERE clause finds the customer with the largest sum of payments by grouping payments by customer and ordering the results by the sum of payment amounts in descending order, \cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 -- and then selecting the top result using the LIMIT keyword.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 SELECT\cf4 \strokec4  \strokec8 film.title\cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \strokec8 film\cb1 \strokec4 \
\cf5 \cb3 \strokec5 JOIN\cf4 \strokec4  \strokec8 inventory\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 film.film_id\strokec4  = \strokec8 inventory.film_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 JOIN\cf4 \strokec4  \strokec8 rental\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 inventory.inventory_id\strokec4  = \strokec8 rental.inventory_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 JOIN\cf4 \strokec4  \strokec8 payment\strokec4  \cf5 \strokec5 ON\cf4 \strokec4  \strokec8 rental.rental_id\strokec4  = \strokec8 payment.rental_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 WHERE\cf4 \strokec4  \strokec8 payment.customer_id\strokec4  = \cf6 \strokec6 (\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 SELECT\cf4 \strokec4  \strokec8 customer_id\strokec4  \cb1 \
\cb3     \cf5 \strokec5 FROM\cf4 \strokec4  \strokec8 payment\strokec4  \cb1 \
\cb3     \cf5 \strokec5 GROUP\cf4 \strokec4  \cf5 \strokec5 BY\cf4 \strokec4  \strokec8 customer_id\strokec4  \cb1 \
\cb3     \cf5 \strokec5 ORDER\cf4 \strokec4  \cf5 \strokec5 BY\cf4 \strokec4  \cf5 \strokec5 SUM\cf6 \strokec6 (\cf4 \strokec8 amount\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 DESC\cf4 \strokec4  \cb1 \
\cb3     \cf5 \strokec5 LIMIT\cf4 \strokec4  \cf9 \cb3 \strokec9 1\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 )\cf4 \strokec4 ;\cb1 \
\
\
\cf2 \cb3 \strokec2 -- 8 Retrieve the customer_id and the total_amount_spent of those clients who spent more than the average of the total_amount spent by each client. You can use subqueries to accomplish this.\cf4 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 SELECT\cf4 \strokec4  \strokec8 customer_id\strokec4 , \cf5 \strokec5 SUM\cf6 \strokec6 (\cf4 \strokec8 amount\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  \strokec8 total_amount_spent\cb1 \strokec4 \
\cf5 \cb3 \strokec5 FROM\cf4 \strokec4  \strokec8 payment\cb1 \strokec4 \
\cf5 \cb3 \strokec5 GROUP\cf4 \strokec4  \cf5 \strokec5 BY\cf4 \strokec4  \strokec8 customer_id\cb1 \strokec4 \
\cf5 \cb3 \strokec5 HAVING\cf4 \strokec4  \strokec8 total_amount_spent\strokec4  \cf6 \strokec6 >\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf4 \strokec4  \cf5 \strokec5 AVG\cf6 \strokec6 (\cf4 \strokec8 total_amount_spent\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3                              \cf5 \strokec5 FROM\cf4 \strokec4  \cf6 \strokec6 (\cf5 \strokec5 SELECT\cf4 \strokec4  \cf5 \strokec5 SUM\cf6 \strokec6 (\cf4 \strokec8 amount\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  \strokec8 total_amount_spent\cb1 \strokec4 \
\cb3                                     \cf5 \strokec5 FROM\cf4 \strokec4  \strokec8 sakila.payment\cb1 \strokec4 \
\cb3                                     \cf5 \strokec5 GROUP\cf4 \strokec4  \cf5 \strokec5 BY\cf4 \strokec4  \strokec8 customer_id\cf6 \strokec6 )\cf4 \strokec4  \cf5 \strokec5 as\cf4 \strokec4  \strokec8 subquery\cf6 \strokec6 )\cf4 \strokec4 ;\cb1 \
}